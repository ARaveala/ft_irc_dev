test_empty_command (test_robustness_edgecases.TestRobustnessEdgeCases.test_empty_command)
Tests sending an empty line to the server. Server should ignore or handle gracefully. ... Test: Sending empty command...
Test: Server ignored empty command correctly.
ok
test_invalid_nick_characters (test_robustness_edgecases.TestRobustnessEdgeCases.test_invalid_nick_characters)
Tests attempting to register with an invalid nickname (e.g., containing '#'). ... Test: Attempting to register with invalid nick 'Inv#lidNick' (should fail)...
FAIL
test_registered_client_disconnect (test_robustness_edgecases.TestRobustnessEdgeCases.test_registered_client_disconnect)
Tests that the server handles a registered client disconnecting gracefully. ... WARNING: Could not precisely parse full hostmask during registration for 'DisconnectUser'. Using guessed values.
FAIL
test_too_long_line (test_robustness_edgecases.TestRobustnessEdgeCases.test_too_long_line)
Tests sending a very long line to the server. Server should handle gracefully, ... Test: Sending a very long line (should be handled gracefully)...
Test: Server response to long line: []
Test: Server handled very long line gracefully.
ok
test_too_long_nick (test_robustness_edgecases.TestRobustnessEdgeCases.test_too_long_nick)
Tests attempting to register with a nickname that is too long. ... Test: Attempting to register with too long nick 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' (should fail)...
FAIL
test_unregistered_client_disconnect (test_robustness_edgecases.TestRobustnessEdgeCases.test_unregistered_client_disconnect)
Tests that the server handles an unregistered client disconnecting gracefully. ... Test: Unregistered client disconnecting...
Test: Server handled unregistered client disconnect gracefully (no crash).
ok
test_whitespace_only_command (test_robustness_edgecases.TestRobustnessEdgeCases.test_whitespace_only_command)
Tests sending a line with only whitespace characters. Server should ignore. ... Test: Sending whitespace only command...
Test: Server ignored whitespace-only command correctly.
ok

======================================================================
FAIL: test_invalid_nick_characters (test_robustness_edgecases.TestRobustnessEdgeCases.test_invalid_nick_characters)
Tests attempting to register with an invalid nickname (e.g., containing '#').
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/shaboom/ft_irc_dev_jack/irc_tester/tests/test_robustness_edgecases.py", line 202, in test_invalid_nick_characters
    self.assertTrue(
AssertionError: False is not true : Server should reject invalid nickname 'Inv#lidNick'. Actual: [':ft_irc NOTICE * :Password accepted. Continuing registration.', ':ft_irc 432  Inv#lidNick :Erroneous nickname']

======================================================================
FAIL: test_registered_client_disconnect (test_robustness_edgecases.TestRobustnessEdgeCases.test_registered_client_disconnect)
Tests that the server handles a registered client disconnecting gracefully.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/shaboom/ft_irc_dev_jack/irc_tester/tests/test_robustness_edgecases.py", line 435, in test_registered_client_disconnect
    self._register_aux_client(client_sock, "DisconnectUser", "disconn", "Disconnect User")
  File "/home/shaboom/ft_irc_dev_jack/irc_tester/tests/test_robustness_edgecases.py", line 83, in _register_aux_client
    self.assert_irc_reply(response, RPL_WELCOME)
  File "/home/shaboom/ft_irc_dev_jack/irc_tester/tests/irc_tester_utils.py", line 255, in assert_irc_reply
    self.assertTrue(found, f"Expected IRC reply {expected_code} not found in response:\n{response_lines}")
AssertionError: False is not true : Expected IRC reply 001 not found in response:
[':ft_irc NOTICE * :Password accepted. Continuing registration.', ':ft_irc 001 DisconnectUser :Welcome to the IRC server DisconnectUser!', ':ft_irc 002 DisconnectUser :Your host is ft_irc, running version 1.0', ':ft_irc 003 DisconnectUser :This server was created today', ':ft_irc 004 DisconnectUser ft_irc 1.0 o o', ':ft_irc 375 DisconnectUser :- ~ Meowdy, traveler! ~', ":ft_irc 372 DisconnectUser :- Here's your good-luck cat butt:", ':ft_irc 372 DisconnectUser :-     /\\_/\\', ':ft_irc 372 DisconnectUser :-    ( o.o )', ':ft_irc 372 DisconnectUser :-     > ^ <    🍑', ':ft_irc 372 DisconnectUser :-     Cat butt initialized.', ':ft_irc 376 DisconnectUser :End of /MOTD']

======================================================================
FAIL: test_too_long_nick (test_robustness_edgecases.TestRobustnessEdgeCases.test_too_long_nick)
Tests attempting to register with a nickname that is too long.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/shaboom/ft_irc_dev_jack/irc_tester/tests/test_robustness_edgecases.py", line 231, in test_too_long_nick
    self.assertTrue(
AssertionError: False is not true : Server should reject too long nickname 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'. Actual: [':ft_irc NOTICE * :Password accepted. Continuing registration.', ':ft_irc 432  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa :Erroneous nickname']

----------------------------------------------------------------------
Ran 7 tests in 19.738s

FAILED (failures=3)
