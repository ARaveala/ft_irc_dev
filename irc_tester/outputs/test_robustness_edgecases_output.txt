test_channel_name_case_insensitivity (test_robustness_edgecases.TestRobustnessEdgeCases.test_channel_name_case_insensitivity)
Tests that channel names are typically case-insensitive according to RFC (e.g., "#channel" vs "#CHANNEL"). ... DEBUG: Client proposed 'ChanCase1', server assigned 'ChanCase1' with user 'user_ChanCase1' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 ChanCase1 :Welcome to the IRC server ChanCase1!', ':localhost 002 ChanCase1 :Your host is localhost, running version 1.0', ':localhost 003 ChanCase1 :This server was created today', ':localhost 004 ChanCase1 localhost 1.0 o o', ':localhost 375 ChanCase1 :- ~ Meowdy, traveler! ~', ":localhost 372 ChanCase1 :- Here's your good-luck cat butt:", ':localhost 372 ChanCase1 :-     /\\_/\\', ':localhost 372 ChanCase1 :-    ( o.o )', ':localhost 372 ChanCase1 :-     > ^ <    🍑', ':localhost 372 ChanCase1 :-     Cat butt initialized.', ':localhost 376 ChanCase1 :End of /MOTD']
DEBUG: Client proposed 'ChanCase2', server assigned 'ChanCase2' with user 'user_ChanCase2' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 ChanCase2 :Welcome to the IRC server ChanCase2!', ':localhost 002 ChanCase2 :Your host is localhost, running version 1.0', ':localhost 003 ChanCase2 :This server was created today', ':localhost 004 ChanCase2 localhost 1.0 o o', ':localhost 375 ChanCase2 :- ~ Meowdy, traveler! ~', ":localhost 372 ChanCase2 :- Here's your good-luck cat butt:", ':localhost 372 ChanCase2 :-     /\\_/\\', ':localhost 372 ChanCase2 :-    ( o.o )', ':localhost 372 ChanCase2 :-     > ^ <    🍑', ':localhost 372 ChanCase2 :-     Cat butt initialized.', ':localhost 376 ChanCase2 :End of /MOTD']
Test: Client1 joins #TestChannel...
Test: Client2 joins #testchannel (same channel, different case)...
Test: ChanCase1 sending PRIVMSG to #TestChannel...
FAIL
test_command_case_insensitivity (test_robustness_edgecases.TestRobustnessEdgeCases.test_command_case_insensitivity)
Tests that IRC commands are case-insensitive (e.g., "privmsg" vs "PRIVMSG"). ... DEBUG: Client proposed 'CaseUser', server assigned 'CaseUser' with user 'user_CaseUser' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 CaseUser :Welcome to the IRC server CaseUser!', ':localhost 002 CaseUser :Your host is localhost, running version 1.0', ':localhost 003 CaseUser :This server was created today', ':localhost 004 CaseUser localhost 1.0 o o', ':localhost 375 CaseUser :- ~ Meowdy, traveler! ~', ":localhost 372 CaseUser :- Here's your good-luck cat butt:", ':localhost 372 CaseUser :-     /\\_/\\', ':localhost 372 CaseUser :-    ( o.o )', ':localhost 372 CaseUser :-     > ^ <    🍑', ':localhost 372 CaseUser :-     Cat butt initialized.', ':localhost 376 CaseUser :End of /MOTD']
DEBUG: Client proposed 'CaseRecip', server assigned 'CaseRecip' with user 'user_CaseRecip' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 CaseRecip :Welcome to the IRC server CaseRecip!', ':localhost 002 CaseRecip :Your host is localhost, running version 1.0', ':localhost 003 CaseRecip :This server was created today', ':localhost 004 CaseRecip localhost 1.0 o o', ':localhost 375 CaseRecip :- ~ Meowdy, traveler! ~', ":localhost 372 CaseRecip :- Here's your good-luck cat butt:", ':localhost 372 CaseRecip :-     /\\_/\\', ':localhost 372 CaseRecip :-    ( o.o )', ':localhost 372 CaseRecip :-     > ^ <    🍑', ':localhost 372 CaseRecip :-     Cat butt initialized.', ':localhost 376 CaseRecip :End of /MOTD']
Test: Sending command with mixed case (pRIVMsG)...
FAIL
test_empty_command (test_robustness_edgecases.TestRobustnessEdgeCases.test_empty_command)
Tests sending an empty line to the server. Server should ignore or handle gracefully. ... Test: Sending empty command...
Test: Server ignored empty command correctly.
ok
test_invalid_nick_characters (test_robustness_edgecases.TestRobustnessEdgeCases.test_invalid_nick_characters)
Tests attempting to register with an invalid nickname (e.g., containing '#'). ... Test: Attempting to register with invalid nick 'Inv#lidNick' (should fail)...
FAIL
test_multiple_commands_on_one_line (test_robustness_edgecases.TestRobustnessEdgeCases.test_multiple_commands_on_one_line)
Tests sending multiple IRC commands on a single line, separated by CRLF. ... DEBUG: Client proposed 'MultiCmdUser', server assigned 'MultiCmdUser' with user 'user_MultiCmdUser' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 MultiCmdUser :Welcome to the IRC server MultiCmdUser!', ':localhost 002 MultiCmdUser :Your host is localhost, running version 1.0', ':localhost 003 MultiCmdUser :This server was created today', ':localhost 004 MultiCmdUser localhost 1.0 o o', ':localhost 375 MultiCmdUser :- ~ Meowdy, traveler! ~', ":localhost 372 MultiCmdUser :- Here's your good-luck cat butt:", ':localhost 372 MultiCmdUser :-     /\\_/\\', ':localhost 372 MultiCmdUser :-    ( o.o )', ':localhost 372 MultiCmdUser :-     > ^ <    🍑', ':localhost 372 MultiCmdUser :-     Cat butt initialized.', ':localhost 376 MultiCmdUser :End of /MOTD']
Test: Sending multiple commands on a single line...
ERROR
test_partial_command_buffering (test_robustness_edgecases.TestRobustnessEdgeCases.test_partial_command_buffering)
Tests sending a command in multiple parts to check server's buffering. ... DEBUG: Client proposed 'PartialUser', server assigned 'PartialUser' with user 'user_PartialUser' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 PartialUser :Welcome to the IRC server PartialUser!', ':localhost 002 PartialUser :Your host is localhost, running version 1.0', ':localhost 003 PartialUser :This server was created today', ':localhost 004 PartialUser localhost 1.0 o o', ':localhost 375 PartialUser :- ~ Meowdy, traveler! ~', ":localhost 372 PartialUser :- Here's your good-luck cat butt:", ':localhost 372 PartialUser :-     /\\_/\\', ':localhost 372 PartialUser :-    ( o.o )', ':localhost 372 PartialUser :-     > ^ <    🍑', ':localhost 372 PartialUser :-     Cat butt initialized.', ':localhost 376 PartialUser :End of /MOTD']
Test: Sending a command in multiple parts...
FAIL
test_registered_client_disconnect (test_robustness_edgecases.TestRobustnessEdgeCases.test_registered_client_disconnect)
Tests that the server handles a registered client disconnecting gracefully. ... DEBUG: Client proposed 'DisconnectUser', server assigned 'DisconnectUser' with user 'user_DisconnectUser' and host 'localhost'. Full response: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 001 DisconnectUser :Welcome to the IRC server DisconnectUser!', ':localhost 002 DisconnectUser :Your host is localhost, running version 1.0', ':localhost 003 DisconnectUser :This server was created today', ':localhost 004 DisconnectUser localhost 1.0 o o', ':localhost 375 DisconnectUser :- ~ Meowdy, traveler! ~', ":localhost 372 DisconnectUser :- Here's your good-luck cat butt:", ':localhost 372 DisconnectUser :-     /\\_/\\', ':localhost 372 DisconnectUser :-    ( o.o )', ':localhost 372 DisconnectUser :-     > ^ <    🍑', ':localhost 372 DisconnectUser :-     Cat butt initialized.', ':localhost 376 DisconnectUser :End of /MOTD']
Test: Registered client disconnecting...
Test: Server handled registered client disconnect gracefully (no crash).
ok
test_too_long_line (test_robustness_edgecases.TestRobustnessEdgeCases.test_too_long_line)
Tests sending a very long line to the server. Server should handle gracefully, ... Test: Sending a very long line (should be handled gracefully)...
Test: Server response to long line: []
Test: Server handled very long line gracefully.
ok
test_too_long_nick (test_robustness_edgecases.TestRobustnessEdgeCases.test_too_long_nick)
Tests attempting to register with a nickname that is too long. ... Test: Attempting to register with too long nick 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' (should fail)...
FAIL
test_unregistered_client_disconnect (test_robustness_edgecases.TestRobustnessEdgeCases.test_unregistered_client_disconnect)
Tests that the server handles an unregistered client disconnecting gracefully. ... Test: Unregistered client disconnecting...
Test: Server handled unregistered client disconnect gracefully (no crash).
ok
test_unregistered_command_handling (test_robustness_edgecases.TestRobustnessEdgeCases.test_unregistered_command_handling)
Tests sending a command like PRIVMSG before being fully registered. ... Test: Sending PRIVMSG before registration (should fail with ERR_NOTREGISTERED)...
ERROR
test_whitespace_only_command (test_robustness_edgecases.TestRobustnessEdgeCases.test_whitespace_only_command)
Tests sending a line with only whitespace characters. Server should ignore. ... Test: Sending whitespace only command...
Test: Server ignored whitespace-only command correctly.
ok

======================================================================
ERROR: test_multiple_commands_on_one_line (test_robustness_edgecases.TestRobustnessEdgeCases.test_multiple_commands_on_one_line)
Tests sending multiple IRC commands on a single line, separated by CRLF.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 309, in test_multiple_commands_on_one_line
    send_irc_command(client_sock, multi_line_command, is_raw=True) # Send as raw string, not automatically adding CRLF
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: send_irc_command() got an unexpected keyword argument 'is_raw'

======================================================================
ERROR: test_unregistered_command_handling (test_robustness_edgecases.TestRobustnessEdgeCases.test_unregistered_command_handling)
Tests sending a command like PRIVMSG before being fully registered.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 177, in test_unregistered_command_handling
    self.assert_irc_reply(response, ERR_NOTREGISTERED, "*", "You have not registered")
TypeError: IrcTestBase.assert_irc_reply() takes from 3 to 4 positional arguments but 5 were given

======================================================================
FAIL: test_channel_name_case_insensitivity (test_robustness_edgecases.TestRobustnessEdgeCases.test_channel_name_case_insensitivity)
Tests that channel names are typically case-insensitive according to RFC (e.g., "#channel" vs "#CHANNEL").
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 394, in test_channel_name_case_insensitivity
    self._assert_message_received_flexible_prefix(recipient_response, nick1, "PRIVMSG", "#testchannel", message, user_part=user1, host_part=host1)
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 123, in _assert_message_received_flexible_prefix
    self.assertTrue(found,
AssertionError: False is not true : Expected message not found with flexible prefixing.
Expected (full, with colon): ':ChanCase1!user_ChanCase1@localhost PRIVMSG #testchannel :Case insensitive channel test!'
Expected (full, without colon): ':ChanCase1!user_ChanCase1@localhost PRIVMSG #testchannel Case insensitive channel test!'
Expected (simplified, with colon): ':ChanCase1 PRIVMSG #testchannel :Case insensitive channel test!'
Expected (simplified, without colon): ':ChanCase1 PRIVMSG #testchannel Case insensitive channel test!'
Actual responses: []

======================================================================
FAIL: test_command_case_insensitivity (test_robustness_edgecases.TestRobustnessEdgeCases.test_command_case_insensitivity)
Tests that IRC commands are case-insensitive (e.g., "privmsg" vs "PRIVMSG").
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 359, in test_command_case_insensitivity
    self._assert_message_received_flexible_prefix(recipient_response, sender_nick, "PRIVMSG", recipient_nick, "Case insensitive test", user_part=sender_user, host_part=sender_host)
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 123, in _assert_message_received_flexible_prefix
    self.assertTrue(found,
AssertionError: False is not true : Expected message not found with flexible prefixing.
Expected (full, with colon): ':CaseUser!user_CaseUser@localhost PRIVMSG CaseRecip :Case insensitive test'
Expected (full, without colon): ':CaseUser!user_CaseUser@localhost PRIVMSG CaseRecip Case insensitive test'
Expected (simplified, with colon): ':CaseUser PRIVMSG CaseRecip :Case insensitive test'
Expected (simplified, without colon): ':CaseUser PRIVMSG CaseRecip Case insensitive test'
Actual responses: []

======================================================================
FAIL: test_invalid_nick_characters (test_robustness_edgecases.TestRobustnessEdgeCases.test_invalid_nick_characters)
Tests attempting to register with an invalid nickname (e.g., containing '#').
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 202, in test_invalid_nick_characters
    self.assertTrue(
AssertionError: False is not true : Server should reject invalid nickname 'Inv#lidNick'. Actual: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 432  Inv#lidNick :Erroneous nickname']

======================================================================
FAIL: test_partial_command_buffering (test_robustness_edgecases.TestRobustnessEdgeCases.test_partial_command_buffering)
Tests sending a command in multiple parts to check server's buffering.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 283, in test_partial_command_buffering
    self.assertTrue(any(f"NICK :NewPartialNick" in line for line in response),
AssertionError: False is not true : Server should process complete NICK command sent in parts. Actual: [':localhost 439 PartialUser :Please wait a moment before changing nick']

======================================================================
FAIL: test_too_long_nick (test_robustness_edgecases.TestRobustnessEdgeCases.test_too_long_nick)
Tests attempting to register with a nickname that is too long.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/jack/github/ft_irc_dev/irc_tester/tests/test_robustness_edgecases.py", line 229, in test_too_long_nick
    self.assertTrue(
AssertionError: False is not true : Server should reject too long nickname 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'. Actual: [':localhost NOTICE * :Password accepted. Continuing registration.', ':localhost 432  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa :Erroneous nickname']

----------------------------------------------------------------------
Ran 12 tests in 50.879s

FAILED (failures=5, errors=2)
